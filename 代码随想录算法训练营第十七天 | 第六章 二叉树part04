● 110.平衡二叉树 
● 257. 二叉树的所有路径 
● 404.左叶子之和 

1、110. 平衡二叉树
（1）题目链接：https://leetcode.cn/problems/balanced-binary-tree/description/
（2）求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）
（3）class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return getHeight(root)==-1?false:true;
    }
    int getHeight(TreeNode* node)
    {
        if(node==nullptr) return 0;
        int leftHeight=getHeight(node->left);
        if(leftHeight==-1) return -1;
        int rightHeight=getHeight(node->right);
        if(rightHeight==-1) return -1;
        int result;
        if(abs(leftHeight-rightHeight)>1)
        { result=-1;}
        else 
        {
            result=1+max(leftHeight,rightHeight);
        }
        return result;
    }
};
2、257. 二叉树的所有路径
（1）题目链接：https://leetcode.cn/problems/binary-tree-paths/description/
（2）class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>paths;
        if(root==nullptr) return paths;
        string curpath;
        dfs(root,curpath,paths);
        return paths;
    }
    void dfs(TreeNode* node,string currentpath,vector<string>&paths)
    {
        if(node==nullptr) return;
        if(!currentpath.empty())
        {
            currentpath+="->";
        }
        currentpath+=to_string(node->val);
        if(node->left==nullptr&&node->right==nullptr)
        {
            paths.push_back(currentpath);
        }
        else
        {
            if(node->left) dfs(node->left,currentpath,paths);
            if(node->right) dfs(node->right,currentpath,paths);
        }
    }
};
3、404.左叶子之和
（1）题目链接：https://leetcode.cn/problems/sum-of-left-leaves/description/
（2）递归法
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==nullptr) return 0;
        int sum=0;
        if(root->left!=nullptr&&root->left->left==nullptr&&root->left->right==nullptr)
        {
            sum+=root->left->val;
        }
        sum+=sumOfLeftLeaves(root->left);
        sum+=sumOfLeftLeaves(root->right);
        return sum;
    }
};
