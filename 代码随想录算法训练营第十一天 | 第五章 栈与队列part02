● 20. 有效的括号
● 1047. 删除字符串中的所有相邻重复项
● 150. 逆波兰表达式求值
1、20. 有效的括号
（1）题目链接：https://leetcode.cn/problems/valid-parentheses/description/
（2）初次解题，无法有效联想到用数据结构-栈进行解题
（3）栈在处理括号问题时，尤其有用
问题，什么时候用双引号，什么时候用单引号----双引号包含很多个字符串，单引号只包含一个字符（char）
（4）class Solution {
public:
    bool isValid(string s) {
        stack<char>left;
        for(auto c:s)
        {
            if(c=='{'||c=='('||c=='[')
            {
                left.push(c);
            }
            else
            {
                if(!left.empty()&&leftof(c)==left.top())
                {
                    left.pop();
                }
                else 
                {
                    return false;
                }
            }
        }
        return left.empty();
    }
    char leftof(char c)
    {
        if(c==']') return '[';
        if(c=='}') return '{';
        return '(';
    }
};
2、1047. 删除字符串中的所有相邻重复项--------匹配问题都是栈的强项
（1）题目链接：https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/
（2）初次尝试
class Solution {
public:
    string removeDuplicates(string s) {
        stack<char>str;
        stack<char>ans;
        string res;
        for(char c:s)
        {

            if(c==str.top())
            {
                str.pop();
            }
            else
            {
             str.push(c);
            }
        }
        for(auto c:str)
        {
            ans.push(c);
        }
        for(char c:ans)
        {
            res=ans.top();
            ans.pop();
        }
        return res;
    }
};
（3）问题点：1、栈中不能使用for循环遍历，for循环只能使用在vector，string类似的容器
            2、在使用 top() 函数前需要确保 stack 非空
（4）修改代码如下
class Solution {
public:
    string removeDuplicates(string s) {
        stack<char>str;
        stack<char>ans;
        string res;
        for(char c:s)
        {

            if(!str.empty()&&c==str.top())
            {
                str.pop();
            }
            else
            {
             str.push(c);
            }
        }
        while(!str.empty())
        {
            ans.push(str.top());
            str.pop();
        }
        while(!ans.empty())
        {
            res+=ans.top();
            ans.pop();
        }
        return res;
    }
};
（5）优化，仅使用一个stack容器
class Solution {
public:
    string removeDuplicates(string s) {
        stack<char>str;
        string res;
        for(char c:s)
        {
            if(!str.empty()&&c==str.top())
            {
                str.pop();
            }
            else
            {
             str.push(c);
            }
        }
        while(!str.empty())
        {
            res+=str.top();
            str.pop();
        }
        reverse(res.begin(),res.end());
        
        return res;
    }
};
3、150. 逆波兰表达式求值
（1）题目链接：https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/
（2）利用栈的特性
（3）第一种解法
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int>stk;
        for(const string&token:tokens)
        {
            if(string("+-*/").find(token)!=string::npos)
            {
                int a=stk.top();stk.pop();
                int b=stk.top();stk.pop();
                switch(token[0])
                {
                    case '+':
                        stk.push(a+b);
                        break;
                    case '-':
                        stk.push(b-a);
                        break;
                    case '*':
                        stk.push(a*b);
                        break;
                    case '/':
                        stk.push(b/a);
                        break;
                }
            }
            else
            {
                stk.push(stoi(token));
            }
        }
        return stk.top();
    }
};
（4）第二种解法
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<long long>stk;
        for(int i = 0; i < tokens.size(); i++)
        {
            if(tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/")
            {
                long long a=stk.top();
                stk.pop();
                long long b=stk.top();
                stk.pop();
                if(tokens[i]=="+")  stk.push(a+b);
                if(tokens[i]=="-")  stk.push(b-a);
                if(tokens[i]=="*")  stk.push(a*b);
                if(tokens[i]=="/")  stk.push(b/a);
            }
            else
            {
                stk.push(stoll(tokens[i]));
            }
        }
        int result = stk.top();
        stk.pop();
        return result;
    }
};
注意点：1、tokens[i]=="+"，遍历tokens[i]时，字符类型是stirng，不能使用char型的单引号
       2、stoll 函数是 C++11 标准库中的一个函数，用于将字符串转换为 long long 类型的整数
