● 513.找树左下角的值
● 112. 路径总和  113.路径总和ii
● 106.从中序与后序遍历序列构造二叉树 105.从前序与中序遍历序列构造二叉树
1、513.找树左下角的值
（1）题目链接：https://leetcode.cn/problems/find-bottom-left-tree-value/description/
（2）迭代法（重点是如何寻找每一层的最左边的值：if(i==0) left_ans=cur->val;）
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        if(root==nullptr) return 0;
        queue<TreeNode*>q;
        q.push(root);
        int left_ans=0;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode *cur=q.front();
                q.pop();
                if(i==0) left_ans=cur->val;
                if(cur->left!=nullptr)  q.push(cur->left);

                if(cur->right!=nullptr) q.push(cur->right);
            }
        }
        return left_ans;
    }
};
2、112. 路径总和
（1）题目链接：https://leetcode.cn/problems/path-sum/description/
（2）class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root==nullptr) return false;
        targetSum-=root->val;
        if(root->left==nullptr&&root->right==nullptr)
        {
            return targetSum==0?true:false;
        }
        return hasPathSum(root->left,targetSum)||hasPathSum(root->right,targetSum);
    }
};
3、113.路径总和ii
（1）题目链接：https://leetcode.cn/problems/path-sum-ii/description/
（2）class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>>res;
        vector<int>paths;
        findpath(root,targetSum,paths,res);
        return res;
    }
    void findpath(TreeNode* node,int sum,vector<int>&path,vector<vector<int>>&res)
    {
        if(!node) return;
        path.push_back(node->val);
        sum-=node->val;
        if(node->left==nullptr&&node->right==nullptr&&sum==0)
        {
            res.push_back(path);
        }
        findpath(node->left,sum,path,res);
        findpath(node->right,sum,path,res);
        path.pop_back();
    }
};
拓展题：654. 最大二叉树（题目链接：https://leetcode.cn/problems/maximum-binary-tree/description/）
（1）class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return build(nums,0,nums.size()-1);
    }
    TreeNode * build(vector<int>&nums,int left,int right)
    {
        if(left>right)
        {
            return nullptr;
        }
        int index=-1,maxval=INT_MIN;
        for(int i=left;i<=right;i++)
        {
            if(maxval<nums[i])
            {
                index=i;
                maxval=nums[i];
            }
        }
        TreeNode *root=new TreeNode(maxval);
        root->left=build(nums,left,index-1);
        root->right=build(nums,index+1,right);
        return root;
    }
};
4、105.从前序与中序遍历序列构造二叉树
（1）题目链接：https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/
（2）class Solution {
    private:
    unordered_map<int,int>valIndex;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0;i<inorder.size();i++)
        {
            valIndex[inorder[i]]=i;
        }
        return build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);
    }
    TreeNode* build(vector<int>&preorder,int preStart,int preEnd,
                    vector<int>&inorder,int inStart,int inEnd)
    {
        if(preStart>preEnd)
        {
            return nullptr;
        }
        int rootVal=preorder[preStart];
        int index=valIndex[rootVal];
        int leftsize=index-inStart;
        TreeNode *root=new TreeNode(rootVal);
        root->left=build(preorder,preStart+1,preStart+leftsize,inorder,inStart,index-1);
        root->right=build(preorder,preStart+leftsize+1,preEnd,inorder,index+1,inEnd);
        return root;
    }
};
5、106.从中序与后序遍历序列构造二叉树
（1）题目链接：https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/
（2）class Solution {
    private:
    unordered_map<int,int>valInx;
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for(int i=0;i<inorder.size();i++)
        {
            valInx[inorder[i]]=i;
        }
        return build(inorder,0,inorder.size()-1,
                     postorder,0,postorder.size()-1);
    }
    TreeNode *build(vector<int>&inorder,int inStart,int inEnd,
                    vector<int>&aftorder,int aftStart,int aftEnd)
    {
        if(inStart>inEnd)
        {
            return nullptr;
        }
        int rootVal=aftorder[aftEnd];
        int index=valInx[rootVal];
        int leftsize=index-inStart;
        TreeNode *root=new TreeNode(rootVal);
        root->left=build(inorder,inStart,index-1,
                         aftorder,aftStart,aftStart+leftsize-1);
        root->right=build(inorder,index+1,inEnd,
                          aftorder,aftStart+leftsize,aftEnd-1);
        return root;
    }
    
};
