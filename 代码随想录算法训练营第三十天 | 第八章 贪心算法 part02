122.买卖股票的最佳时机II 
55. 跳跃游戏 
45.跳跃游戏II 
1005.K次取反后最大化的数组和 

1、122.买卖股票的最佳时机II
（1）题目链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/
（2）局部最优：收集每天的正利润，全局最优：求得最大利润。
（3）贪心解法：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int result=0;
        for(int i=1;i<prices.size();i++)
        {
            result+=max(prices[i]-prices[i-1],0);
        }
        return result;
    }
};
2、55. 跳跃游戏
（1）题目链接：https://leetcode.cn/problems/jump-game/description/
（2）class Solution {
public:
    bool canJump(vector<int>& nums) {
        int cover=0;
        if(nums.size()==1) return true;
        for(int i=0;i<=cover;i++)
        {
            cover=max(i+nums[i],cover);
            if(cover>=nums.size()-1) return true;
        }
        return false;
    }
};
3、45.跳跃游戏II
（1）题目链接：https://leetcode.cn/problems/jump-game-ii/description/
（2）精华所在：i<num.size()-1
（3）class Solution {
public:
    int jump(vector<int>& nums) {
        int jumps=0;
        int farstdis=0;
        int end=0;
        for(int i=0;i<nums.size()-1;i++)
        {
            farstdis=max(i+nums[i],farstdis);
            if(i==end)
            {
                jumps++;
                end=farstdis;
            }
        }
        return jumps;
    }
};
（4）i<num.size()的情况，多加两个判断
class Solution {
public:
    int jump(vector<int>& nums) {
        int jumps=0;
        int farstdis=0;
        int end=0;
        if(nums.size()==1) return 0;
        for(int i=0;i<nums.size();i++)
        {
            farstdis=max(i+nums[i],farstdis);
            if(i==end)
            {
                jumps++;
                end=farstdis;
                if(farstdis>=nums.size()-1) break;
            }
        }
        return jumps;
    }
};
4、1005.K次取反后最大化的数组和 
（1）题目链接：https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/description/
（2）class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        int res=0;
        sort(nums.begin(),nums.end(),[](int a,int b){return abs(a)>abs(b);});
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]<0&&k>0)
            {
                nums[i] *=-1;
                k--;
            }
        }
        if(k%2==1) nums[nums.size()-1] *=-1;
            for(auto c:nums)
            {
                res+=c;
            }
        return res;
    }
};
