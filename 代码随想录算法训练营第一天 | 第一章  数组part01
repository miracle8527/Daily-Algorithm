数组理论基础，704. 二分查找，27. 移除元素
1：704. 二分查找
（1）今日学习文章：数组的理论基础；
    文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html
  重点：数组内存空间的地址是连续的，C++中二维数组也是连续分布的；数组的元素是不能删除的，只能覆盖。
 要注意vector与array的区别
（2）看到题目的想法：二分查找无非在有序的数组中让中间值与目标值进行比对，若中间值比目标值大，则中间值的右侧全部忽略，再次进行剩余数中的中间值与目标值进行比较，直到找到目标值或者找不到目标值
（疑惑点，是否可以在链表中使用二分查找？----不适合，二分查找的意义在于数组的查找是O（1）的，而链表的查找是O（n）的；链表的插入与删除元素比数组更灵活）
   题目链接：https://leetcode.cn/problems/binary-search/
   文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html
读文章时遇到不懂的专业术语：循环不变量-----在循环的过程中保持不变的性质；循环不变量存在是为了证明算法的正确性，让我们明确在循环过程中我们在做些什么（文章讲解https://cloud.tencent.com/developer/article/2122225）
（3）写题时的想法：1、while与for循环的区别
             2、如何写mid中间值，才能避免数值溢出？
（4）初次尝试代码：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0;
        int right=nums.size()-1;
        int mid=(right-left)/2+left;
        while(1)
        {
            if(target==mid)
            {
                return mid;
                break;
            }
            else if(target>mid)
            {
                left=mid;
                continue;
            }
            else if(target<mid)
            {
                right=mid;
                continue;
            }
        }
        return -1;
    }
};
（5）代码错误：第一点：忘记是用数组中的元素与目标值进行比较，而不是数组下标，mid应添加nums[]
第二点：while的循环条件忘记考虑 left>right的情况
第三点：(开闭区间需要理清)中间值与目标值比对后，变化条件写错了，当前中间值已经比较过，比较值是开区间，所以应该写left=mid+1;或right=mid-1;
第四点：while(left<=right)还是写while(left<right)：不同的两种二分写法，左闭右开与左闭右闭：当nums[left]==nums[right]有意义时，应该写为left<=right，此时应该写left=mid+1;或right=mid-1
第五点：left和right已经更新了，但是mid写在while循环外，没有进行更新
（6）代码修改如下：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0;
        int right=nums.size()-1;
        while(left<=right)
        {
         int mid=(right-left)/2+left;
            if(target==nums[mid])
            {
                return mid;
            }
            else if(target>nums[mid])
            {
                left=mid+1;
            }
            else if(target<nums[mid])
            {
                right=mid-1;
            }
        }
        return -1;
    }
};
2：27. 移除元素
     题目链接：https://leetcode.cn/problems/remove-element/ 
     文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html
（1）看到题目的想法：直接计算与val不同元素的数量并返回
（2）暴力解码
（3）双指针法（快慢指针）：通过快慢指针可以在一个for循环下完成两个for循环的工作
（4）代码尝试：class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int slow=0;
        for(int fast=0;fast<=nums.size()-1;fast++)
        {
            if(nums[fast]!=val)
            {
                nums[slow++]=nums[fast];
            }
        }
        return slow;
    }
};
思考点：为什么写fast<=nums.size()-1报错，改成fast<nums.size()就可以了？
